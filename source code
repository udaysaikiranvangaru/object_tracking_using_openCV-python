#pip install opencv-python opencv-contrib-python numpy

import cv2
import argparse

# Dictionary mapping algorithm names to OpenCV tracker types
TRACKERS = {
    'BOOSTING': cv2.legacy.TrackerBoosting_create,
    'MIL': cv2.TrackerMIL_create,
    'KCF': cv2.TrackerKCF_create,
    'TLD': cv2.legacy.TrackerTLD_create,
    'MEDIANFLOW': cv2.legacy.TrackerMedianFlow_create,
    'GOTURN': cv2.TrackerGOTURN_create,
    'MOSSE': cv2.legacy.TrackerMOSSE_create,
    'CSRT': cv2.TrackerCSRT_create
}

def get_tracker(name):
    """ Return the tracker object based on name """
    return TRACKERS[name]()

def main(args):
    tracker = get_tracker(args.tracker)

    if args.video:
        cap = cv2.VideoCapture(args.video)
    else:
        cap = cv2.VideoCapture(0)

    # Read the first frame
    ret, frame = cap.read()
    if not ret:
        print("Failed to read the video stream")
        return

    # Select the bounding box in the first frame
    bbox = cv2.selectROI("Tracking", frame, False)
    tracker.init(frame, bbox)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Update the tracker
        success, bbox = tracker.update(frame)
        if success:
            x, y, w, h = [int(v) for v in bbox]
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(frame, args.tracker, (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        else:
            cv2.putText(frame, "Tracking failure detected", (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        cv2.imshow("Tracking", frame)
        if cv2.waitKey(1) & 0xFF == 27:  # Press 'ESC' to exit
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Object Tracking using OpenCV")
    parser.add_argument("--tracker", type=str, default="KCF", choices=TRACKERS.keys(), help="Tracking algorithm")
    parser.add_argument("--video", type=str, help="Path to video file. If not specified, webcam will be used")
    args = parser.parse_args()

    main(args)


